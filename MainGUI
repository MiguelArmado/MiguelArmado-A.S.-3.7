"""
Title: Foreign Exchange
Written by: Miguel Armado
Date Written: 25/06/2024
Purpose of the program: To allow the user to convert currencies through the use of a GUI
V1: Create a GUI for my main menu where the user can convert currencies
"""
# Import the necessary library/ies
from tkinter import *
import requests
from tkinter import ttk

# Initialize the API so that I can use the data to get the currencies and conversions
url = "https://v6.exchangerate-api.com/v6/9e764c29f1f368dc0202e365/latest/USD"

response = requests.get(url)
data = response.json()

# Variables
# List of currencies
currencies = list(data["conversion_rates"].keys())

# Font styles
sub_headings = ("Helvetica", 9, "bold")

# Colors
gray = "#E6E6E6"
orange = "#FFB570"
blue = "#8282FF"
red = "#FF0000"
black = "#000000"


# Create a GUI class
class Forex(Tk):
    def __init__(self):
        super().__init__()
        # Change the title of the program to Foreign Exchange, set the size of the window and make it not resizeable
        self.title("Foreign Exchange"), self.geometry("510x320"), self.resizable(0, 0)
        self.configure(bg=gray)

        # Set up the text variable's data types that will constantly change throughout the game.
        self.amount_num = StringVar()
        self.currencies = currencies
        self.from_currency = StringVar()
        self.to_currency = StringVar()
        self.converted_value = DoubleVar()

        # Setting the default amounts for the amount to be converted
        # and converted to 0

        self.amount_num.set("")

        # Label for the title of the program
        self.forex_lbl1 = Label(self,
                                text="Currency Converter",
                                bg=gray,
                                font=("Helvetica", 18, "bold"))
        self.forex_lbl1.grid(ipadx=10, ipady=20,
                             sticky=S)

        # Label for the amount the user wants to convert
        self.amount_lbl2 = Label(self,
                                 text="Amount:",
                                 bg=gray,
                                 font=sub_headings)
        self.amount_lbl2.grid(row=1, column=0,
                              ipadx=6, ipady=5,
                              sticky=W)

        # Entry box for the amount the user wants to convert
        self.amount_num_entry1 = Entry(self,
                                       textvariable=self.amount_num,
                                       bg="#ABB0FF",
                                       font=sub_headings,
                                       width=25)
        self.amount_num_entry1.grid(row=1, column=0,
                                    sticky=E)

        # Label for the currency the user wants to convert from
        self.from_lbl3 = Label(self,
                               text="From:",
                               bg=gray,
                               font=sub_headings)
        self.from_lbl3.grid(row=2, column=0,
                            ipadx=10, ipady=5,
                            sticky=W)

        # a Combobox that will display the currencies the user wants to convert from
        # This ComboBox also has a feature to autocomplete or change the contents
        # of the combobox to display the currencies that start with the letter the user
        # inputted when the user releases a key. It also does not allow the input of special characters and
        # numbers, decreasing the possibilities of errors in the program.
        self.from_currency_combo1 = ttk.Combobox(self,
                                                 width=23,
                                                 textvariable=self.from_currency,
                                                 values=self.currencies,
                                                 validate='key',
                                                 validatecommand=(self.register(self.__validate_combo_input), '%d', '%P'))
        self.from_currency_combo1.bind('<KeyRelease>', self.__update_combo)
        self.from_currency_combo1.grid(row=2, column=0,
                                       ipadx=10, ipady=5,
                                       sticky=E)

        # Space between comboboxes
        self.spacer1 = Label(self, text="",
                             bg=gray)
        self.spacer1.grid(row=3, column=0)

        # Label for the currency the user wants to convert to
        self.to_lbl4 = Label(self,
                             text="To: ",
                             width=8,
                             bg=gray,
                             font=sub_headings)
        self.to_lbl4.grid(row=4, column=0,
                          sticky=W)

        # Same with the first combobox, it does the same but this time it will contain the currency the user wants to
        # converts to
        self.to_currency_combo2 = ttk.Combobox(self,
                                               width=23,
                                               textvariable=self.to_currency,
                                               values=self.currencies,
                                               validate='key',
                                               validatecommand=(self.register(self.__validate_combo_input), '%d', '%P'))
        self.to_currency_combo2.bind('<KeyRelease>', self.__update_combo)
        self.to_currency_combo2.grid(row=4, column=0,
                                     ipadx=10, ipady=5,
                                     sticky=E)
        # Label for the error message
        self.error_lbl5 = Label(self,
                                text="",
                                bg=gray,
                                fg=red,
                                font=sub_headings,
                                justify=CENTER)
        self.error_lbl5.grid(row=5, column=0,
                             sticky="E")

        # Label for the converted amount (text)
        self.converted_lbl6 = Label(self,
                                    text="Converted amount: ",
                                    fg=black,
                                    bg=gray,
                                    font=sub_headings)
        self.converted_lbl6.grid(row=6, column=0,
                                 ipady=10, sticky="W")

        # Label for the converted amount value
        self.amount_converted_lbl7 = Label(self,
                                           text="",
                                           fg=black,
                                           font=sub_headings,
                                           width=18,
                                           borderwidth=1,
                                           relief=SOLID)
        self.amount_converted_lbl7.grid(row=6, column=0,
                                        ipady=10, sticky="E")

        # Spacer for between the error message and the calculate button
        self.spacer2 = Label(self,
                             text="",
                             bg=gray)
        self.spacer2.grid(row=7, column=0)

        # Button to calculate the conversion
        self.button_calculate = Button(self,
                                       width=24,
                                       height=2,
                                       fg=black,
                                       bg=blue,
                                       text="Calculate",
                                       font=sub_headings,
                                       command=self.calculate,
                                       borderwidth=1,
                                       relief=SOLID
                                       )
        self.button_calculate.grid(row=8, column=0,
                                   sticky="E")

        self.mainloop()

    def validate_currencies(self):
        # This purpose of this method is to validate if both of the currencies are valid
        if self.from_currency.get().upper() in self.currencies and self.to_currency.get().upper() in self.currencies:
            return True
        else:
            return False

    def calculate(self):
        validate_currency = self.validate_currencies()
        validate_amount = self.validate_amount()
        if validate_amount:
            if validate_currency:
                self.converted_value = self.conversion_to_usd() * data["conversion_rates"][self.to_currency.get().upper()]
                self.amount_converted_lbl7.config(text=f"{self.converted_value:.2f}")
            else:
                self.error_lbl5.config(text="Both currencies must be valid")
                self.amount_converted_lbl7.config(text="")
        else:
            self.error_lbl5.config(text="Amount must only be a number")
            self.amount_converted_lbl7.config(text="")
            
    def conversion_to_usd(self):
        return float(self.amount_num.get()) / data["conversion_rates"][self.from_currency.get().upper()]

    def validate_amount(self):
        if not self.amount_num.get().isdigit():
            return False
        else:
            return True

    # These static methods are just for the autocomplete capability of my two comboboxes
    @staticmethod
    def __validate_combo_input(action, text) -> bool:
        if int(action) == 1:
            return text.isalpha() and len(text) <= 3
        else:
            return True

    def __update_combo(self, event):
        if event.char.isalpha() or event.keysym == 'BackSpace':
            self.from_currency_combo1.configure(values=[i for i in self.currencies if
                                                        i.startswith(self.from_currency_combo1.get().upper())])
            self.to_currency_combo2.configure(values=[i for i in self.currencies if
                                                        i.startswith(self.to_currency_combo2.get().upper())])


Forex()